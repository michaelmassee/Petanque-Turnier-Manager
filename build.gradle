
plugins {
    id 'java'
    id 'eclipse'
}

repositories {
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    def libreofficeVersion='6.4.7'

    implementation 'com.google.guava:guava:28.1-jre'
    implementation 'org.apache.commons:commons-lang3:3.+'
    implementation 'org.apache.commons:commons-collections4:4.+'
    implementation 'org.apache.logging.log4j:log4j-core:2.+'
    implementation 'org.kohsuke:github-api:1.+'
    implementation 'com.google.code.gson:gson:2.8.+'
    implementation 'com.g00fy2:versioncompare:1.3.+'
    implementation 'commons-io:commons-io:2.+'
    compileOnly "org.libreoffice:jurt:${libreofficeVersion}"
    compileOnly "org.libreoffice:juh:${libreofficeVersion}"
    compileOnly "org.libreoffice:unoil:${libreofficeVersion}"
    compileOnly "org.libreoffice:ridl:${libreofficeVersion}"

    testImplementation 'junit:junit:4.+'
    testImplementation 'org.assertj:assertj-core:3.+'
    testImplementation 'org.mockito:mockito-core:3.+'
    testImplementation 'org.powermock:powermock-api-mockito2:2.+'
}

eclipse {
    classpath {
       downloadSources=true
       downloadJavadoc = true
    }
}

eclipse.project {
      // https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.eclipse.model.EclipseProject.html
      natures 'org.libreoffice.ide.eclipse.core.unonature', 'org.eclipse.buildship.core.gradleprojectnature'
      buildCommand 'org.libreoffice.ide.eclipse.core.types'
}

eclipse.classpath.file {
   withXml {
    /**
     def node = it.asNode()
     def alreadyExistLibreOffice = node.find { entry ->
      entry.path.text().endsWith ("LibreOffice 6.2") 
     }
     if (!alreadyExistLibreOffice) {
		node.appendNode('classpathentry', 
		        [kind: 'con', path: 'org.libreoffice.ide.eclipse.java.OOO_CONTAINER/LibreOffice 6.2'])
	}
	
**/		
	// <classpathentry kind="lib" path="build"/>
	 def alreadyExistLibBuild = node.find { entry ->
       entry.kind.text().equals ("lib") &&  entry.path.text().equals ("build")
     }
     
     if (!alreadyExistLibBuild) {
		node.appendNode('classpathentry', 
		        [kind: 'lib', path: 'build'])
	}
  }
}

task cleanCache (type: Delete) {
  delete "dist/.ooo-debug/user/uno_packages/cache"
}

task copyRuntimeLibs(type: Sync) {
   	from configurations.runtimeClasspath
   	into "libs"
}
